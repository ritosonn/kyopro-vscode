{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"include": {
		"scope": "cpp",
		"prefix": "include",
		"body": "include<${1:cstdio}>"
	},
	"main": {
		"scope": "cpp",
		"prefix": "main",
		"body": [
			"main(){",
			"    $1",
			"    return 0;",
			"}"
		]
	},
	"scanf": {
		"scope": "cpp",
		"prefix": "scanf",
		"body": "scanf(\"${1:%d}\",${2:&n});"
	},
	"printf": {
		"scope": "cpp",
		"prefix": "printf",
		"body": "printf(\"${1:%d}\",${2:n});"
	},
	"ll": {
		"scope": "cpp",
		"prefix": "ll",
		"body": "long long"
	},
	"pairtype": {
		"scope": "cpp",
		"prefix": "typedef",
		"body": "typedef std::pair<${1:int},${2:int}> ${3:pii}"
	}
}